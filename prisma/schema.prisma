// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  posts         Post[]
  projects      Project[]
}

// Profile model for the data analyst
model Profile {
  id          String   @id @default(cuid())
  bio         String
  headline    String
  location    String?
  website     String?
  github      String?
  linkedin    String?
  twitter     String?
  resumeUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills      Skill[]
}

// Project model to showcase work
model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  projectUrl  String?
  githubUrl   String?
  featured    Boolean  @default(false)
  tags        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Post model for blog functionality
model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String
  excerpt   String?
  imageUrl  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Skill model for data analyst skills
model Skill {
  id        String   @id @default(cuid())
  name      String
  category  String?
  level     Int?     @default(1) // 1-5 skill level
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}
